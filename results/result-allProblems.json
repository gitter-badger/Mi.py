{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class must implement all abstract methods",
  "severity": "Moderate",
  "comment": "Class AbstractBotBase must implement all abstract methods",
  "detailsInfo": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/bot.py",
      "language": "Python",
      "line": 12,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 10,
        "length": 15,
        "offset": 8,
        "surroundingCode": "\n\nclass AbstractBotBase(AbstractGroupMixin):\n    @abstractmethod\n    async def can_run(self, ctx: AbstractContext, *, call_once: bool = False) -> bool:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyAbstractClassInspection"
  },
  "hash": "dd5f8d1042e0cdba9a557b0b2fdece818ac961a6277cc839b65ccf5afc8ed4c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Local variable 'checks' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 109,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 107,
        "length": 6,
        "offset": 89,
        "surroundingCode": "            checks = kwargs.get('checks', [])\n        finally:\n            self.checks = checks\n        self.cog = None\n        parent = kwargs.get('parent')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "fc8adb3dd15e1427511373cbe5023d45aa5e3418298f3fc2e078d0135b968317"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Name '__path__' can be undefined",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/__init__.py",
      "language": "Python",
      "line": 9,
      "offset": 46,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 68,
        "surroundingCode": "__version__ = \"1.0.3\"\n\n__path__ = __import__(\"pkgutil\").extend_path(__path__, __name__)\n\nfrom .abc import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "4cf7ae0dccb3c81843753033a4d00c7785eb32d9398aad7f158dfe590d49083e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect property definition",
  "severity": "High",
  "comment": "Getter should return or yield something",
  "detailsInfo": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/core.py",
      "language": "Python",
      "line": 8,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 6,
        "length": 7,
        "offset": 42,
        "surroundingCode": "    @property\n    @abstractmethod\n    def command(self):\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPropertyDefinitionInspection"
  },
  "hash": "e308ade67308be3a90789b056b83c21ad85985d244baa4f1123dd56fdc7a73ed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect property definition",
  "severity": "High",
  "comment": "Getter should return or yield something",
  "detailsInfo": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/core.py",
      "language": "Python",
      "line": 22,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 20,
        "length": 16,
        "offset": 42,
        "surroundingCode": "    @property\n    @abstractmethod\n    def full_parent_name(self) -> str:\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPropertyDefinitionInspection"
  },
  "hash": "3b94a8eb511ffab6af1bec4b4b2c5914b94956cb0bd24e4f0a127c8f057c3d73"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect property definition",
  "severity": "High",
  "comment": "Getter should return or yield something",
  "detailsInfo": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/core.py",
      "language": "Python",
      "line": 27,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 25,
        "length": 14,
        "offset": 42,
        "surroundingCode": "    @property\n    @abstractmethod\n    def qualified_name(self) -> str:\n        pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPropertyDefinitionInspection"
  },
  "hash": "1543b1cd1176e93c386037ec73d8b39797da405d7411cdb535fbdbfa1a55e2a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Attempt to call a non-callable object",
  "severity": "High",
  "comment": "'Command' object is not callable",
  "detailsInfo": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 63,
      "offset": 22,
      "length": 50,
      "code": {
        "startLine": 61,
        "length": 50,
        "offset": 129,
        "surroundingCode": "        def decorator(func: Callable[..., Any]):  # TODO:????\n            kwargs.setdefault('parent', self)\n            result = command(name=name, cls=cls, *args, **kwargs)(func)\n            return result\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyCallingNonCallableInspection"
  },
  "hash": "69c46bf50a6edd973bcbf58d5ff7140b34298c7783a74089cca1976d4cfe1ca7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `call_after_hooks` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 130,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 128,
        "length": 16,
        "offset": 40,
        "surroundingCode": "        return self.name\n\n    async def call_after_hooks(self, ctx):\n        hook = ctx.bot._after_invoke\n        if hook is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "59eceba8aba04efd73e8eb40403e54128e6e332f3d25a993526a4cafda0fdeab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `on_message` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_class.py",
      "language": "Python",
      "line": 28,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 26,
        "length": 10,
        "offset": 51,
        "surroundingCode": "        self.task.stop()  # ???????\n\n    async def on_message(self, note: Note):\n        print(\n            f\"{note.author.instance.name} | {note.author.username}??????????: {note.content}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "8c53e9edfe0562802e59493d89444a0e584f03caf097ba4b36c49ca2c0f3c571"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 63,
      "offset": 50,
      "length": 5,
      "code": {
        "startLine": 61,
        "length": 5,
        "offset": 157,
        "surroundingCode": "        def decorator(func: Callable[..., Any]):  # TODO:????\n            kwargs.setdefault('parent', self)\n            result = command(name=name, cls=cls, *args, **kwargs)(func)\n            return result\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "4557540c3975d2bc344eb0b65e26d4a268105aaa3718f74fc343b37998f7302d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 44,
      "offset": 88,
      "length": 9,
      "code": {
        "startLine": 42,
        "length": 9,
        "offset": 149,
        "surroundingCode": "\n    def _get_state(self, **options: Any) -> ConnectionState:\n        return ConnectionState(dispatch=self.dispatch, http=self.http, loop=self.loop, **options)\n\n    async def on_ready(self, ws: ClientWebSocketResponse):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "b60663d9373c5bab0907a65700e0e86e168cc70959c71c7ba51f1bcc97984501"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Local variable 'cls' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 109,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 107,
        "length": 3,
        "offset": 54,
        "surroundingCode": "\n    def _inject(self, bot: AbstractBotBase):\n        cls = self.__class__\n        for index, command in enumerate(self.__cog_commands__):\n            if command.parent is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "86992b421f9f9024111b9f52c1452d54698cd99ad88cfa32a72ff6cb81df4cc5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'parameters' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/http.py",
      "language": "Python",
      "line": 31,
      "offset": 48,
      "length": 17,
      "code": {
        "startLine": 29,
        "length": 17,
        "offset": 61,
        "surroundingCode": "\nclass Route:\n    def __init__(self, method: str, path: str, **parameters: Any):\n        self.path: str = path\n        self.method: str = method"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "b0a78f1747403551dde954cffbd32c8c0c58798062ffeb8c02127dcdbbd57512"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'files' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/http.py",
      "language": "Python",
      "line": 54,
      "offset": 46,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 87,
        "surroundingCode": "        self.token: Optional[str] = None\n\n    async def request(self, route: Route, *, files=None, form=None, **kwargs) -> Any:\n        headers: Dict[str, str] = {\n            'User-Agent': self.user_agent,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c84087b819fa792464455aebc22e4a5ccd571f9d45e474448917f20c0220eec2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'form' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/http.py",
      "language": "Python",
      "line": 54,
      "offset": 58,
      "length": 9,
      "code": {
        "startLine": 52,
        "length": 9,
        "offset": 99,
        "surroundingCode": "        self.token: Optional[str] = None\n\n    async def request(self, route: Route, *, files=None, form=None, **kwargs) -> Any:\n        headers: Dict[str, str] = {\n            'User-Agent': self.user_agent,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "800c3e1b187ec0c66caa86291e13dbed7800ae088fb288fde675bc2d9659c525"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'reconnect' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 382,
      "offset": 32,
      "length": 22,
      "code": {
        "startLine": 380,
        "length": 22,
        "offset": 78,
        "surroundingCode": "        self.i = User(data, self._connection)\n\n    async def connect(self, *, reconnect: bool = True, timeout: int = 60) -> None:\n\n        coro = MisskeyWebSocket.from_client(self, timeout=timeout)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "3cf0e1f432e48d98283055fd5a67e4e05c1532394018152f683ece1e4bbbd606"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 64,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 62,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n\ndef depart_attributetable_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c2783c30b39c7803d6b306a324dc75470ecd2c43010974e1255a541f02bd66c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 68,
      "offset": 44,
      "length": 4,
      "code": {
        "startLine": 66,
        "length": 4,
        "offset": 45,
        "surroundingCode": "\n\ndef depart_attributetablecolumn_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c0259b8a9d9ede31374c99ce5cde5b08e498fd8bffb7a3c6c49cf23b479e1435"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 72,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 70,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetabletitle_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1ba68d3e3cf22827c0089314d3801ff5f436e64e7691ac872cd842cd9ddc9c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 76,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetablebadge_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8bfdbb91e0b2d3edac3af7876b27f24741b310c30acabdc5bf9968f78033810c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 80,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 78,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetable_item_node(self, node):\n    self.body.append('</li>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f75f0f54a460710801f1f0f91151b48653daa46c27bb5353ec80f6035762dde6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'fromdocname' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 170,
      "offset": 62,
      "length": 16,
      "code": {
        "startLine": 168,
        "length": 16,
        "offset": 63,
        "surroundingCode": "\n\ndef process_attributetable(app: application.Sphinx, doctree, fromdocname: str):\n    env = app.builder.env\n    lookup = build_lookup_table(env)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "26e407b636c2a5b80976ded6e8fea8a6919ebaa54eaaf350cc984b9224f26842"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'command' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 24,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 22,
        "length": 7,
        "offset": 60,
        "surroundingCode": "\n    def recursively_remove_all_commands(self):\n        for command in self.all_commands.copy().values():\n            if isinstance(command, GroupMixin):\n                command.recursively_remove_all_commands()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "e9ed579d85a03b60fd520899b0a06e782f148c5ad74082c186f43f66d6edc07f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'command' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 29,
      "offset": 27,
      "length": 7,
      "code": {
        "startLine": 27,
        "length": 7,
        "offset": 73,
        "surroundingCode": "            self.remove_command(command.name)\n\n    def add_command(self, command: AbstractCommand):\n        if not isinstance(command, Command):\n            raise TypeError(f'{command} passed must be a subclass of Command')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "36fb36e47720464e1d595854f8847dd9909df47618582a5a39e457694e56d00a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'command' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 47,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 45,
        "length": 7,
        "offset": 50,
        "surroundingCode": "\n    def remove_command(self, name: str):\n        command = self.all_commands.pop(name, None)\n        if command is None:\n            return None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "80dad84a6e132510e6e9ea9162a1fc01a77a3fdb237b5cb92912ee2b63661608"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'command' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 69,
      "offset": 29,
      "length": 7,
      "code": {
        "startLine": 67,
        "length": 7,
        "offset": 30,
        "surroundingCode": "\n\ndef hooked_wrapped_callback(command: 'Command', ctx, coro):\n    @functools.wraps(coro)\n    async def wrapped(*args: Tuple[Any], **kwargs: Dict[Any, Any]):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "113428710fc257f0df357908efa98d294cb9ffaea6a8fdd86892a95922046c64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'command' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 117,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 115,
        "length": 7,
        "offset": 68,
        "surroundingCode": "    def full_parent_name(self) -> str:\n        entries = []\n        command = self\n        while command.parent is not None:\n            command = command.parent"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "87b50aec14eff68d6d07e764a818cc0d0269b0b0b1afbbdff893d33e35ed0156"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "severity": "Moderate",
  "comment": "Shadows name 'command' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 119,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 117,
        "length": 7,
        "offset": 77,
        "surroundingCode": "        command = self\n        while command.parent is not None:\n            command = command.parent\n            entries.append(command.name)\n        return ' '.join(reversed(entries))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "f44a9fae6c0a6ff9be0aef60c2655742243775957f38af1e90113a562733a0eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/_types.py",
      "language": "Python",
      "line": 1,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 1,
        "length": 12,
        "offset": 6,
        "surroundingCode": "class _BaseCommand:\n    __slots__ = ()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "eb206ac918f84fd8ed9c011967448fef19ebd652d2ec18b85cb042869c5a0287"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/instance.py",
      "language": "Python",
      "line": 9,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass Features:\n    registration: bool\n    local_time_line: bool"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "8b55c9d41d5959d58cced62f653206b4ca23179d05d4a47e3fec158743619d81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/http.py",
      "language": "Python",
      "line": 16,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 14,
        "length": 16,
        "offset": 8,
        "surroundingCode": "\n\nclass _MissingSentinel:\n    def __eq__(self, other):\n        return False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "eac5e23a7ea28dc0784d683e91070d247a1b2b7c33953b3a20ff020528218e28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 15,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 13,
        "length": 14,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "864af21adf92daee912befdfe8f40cfa477ac9bf7c187b09be85aaf18b2f8a01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 19,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 17,
        "length": 20,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablecolumn(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "73d0b2a4abb082fe0874fde273575ff2420d4985fff7d7d9ab649c69dc5bad41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 23,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 21,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetabletitle(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "073e0b2a7f7627abb0424f2a5bd62947f3ae3c6f744626b99321a86ae796cc1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 27,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 25,
        "length": 25,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetableplaceholder(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2c6dd13b6676bf62a49ec1f5bc57bc44c5b0edf019532032837c286bc69ea817"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 31,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 29,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablebadge(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7bb23b02ec5ff0f3d57b5e25ca91326a0f4e262100664c05154fd27b8276f6a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 35,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable_item(nodes.Part, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "acdd07f0f692222f4a4e65e7f56ebb34d1462eb9a94d73321ed345a55e6fb59c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _inject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 191,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 189,
        "length": 11,
        "offset": 65,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: ??\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "c204bc6b230440d861709c16101eaeacec13bb24e2f5c9edc37803c08ca82df7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _eject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 200,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 198,
        "length": 10,
        "offset": 28,
        "surroundingCode": "            return\n\n        cog._eject(self)\n\n        return cog"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "62e6f0e1bb3a0cb2d3e9a7ead6ed166f1212f5131948cbcad1304a956c73f9ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _update_copy of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 73,
      "offset": 39,
      "length": 14,
      "code": {
        "startLine": 71,
        "length": 14,
        "offset": 115,
        "surroundingCode": "        self = super().__new__(cls)\n        cmd_attrs = cls.__cog_settings__\n        self.__cog_commands__ = tuple(c._update_copy(cmd_attrs) for c in cls.__cog_commands__)\n\n        lookup = {cmd.qualified_name: cmd for cmd in self.__cog_commands__}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "ac34a4acaaf552a7b35ac92ebb39c9c3d86713468227fdf3ea3b2caa3c96486f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _after_invoke of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 131,
      "offset": 16,
      "length": 21,
      "code": {
        "startLine": 129,
        "length": 21,
        "offset": 59,
        "surroundingCode": "\n    async def call_after_hooks(self, ctx):\n        hook = ctx.bot._after_invoke\n        if hook is not None:\n            await hook(ctx)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "a79353604b9da8d1a7b1fdd5e1de8e2b448fb3e5a9096198a314684abc720607"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'Follower' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 18,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 16,
        "length": 8,
        "offset": 103,
        "surroundingCode": "from mi.iterators import InstanceIterator\nfrom mi.note import Note, Poll, Reaction\nfrom mi.user import Follower, Following\nfrom mi.utils import check_multi_arg, get_cache_key, get_module_logger, key_builder, remove_dict_empty, str_lower, \\\n    upper_to_lower"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "a0aa05d5c64fcee3ceece9c28947bc4f3a37276935aeb4dd89ede8ec4cb74aa5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 36,
      "offset": 26,
      "length": 18,
      "code": {
        "startLine": 34,
        "length": 18,
        "offset": 89,
        "surroundingCode": "        ws = cls(socket)\n        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "ac044ba627ec97a0f5b2c56d443c426b144b990be36c92c5f49a919346cf8d82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 37,
      "offset": 31,
      "length": 18,
      "code": {
        "startLine": 35,
        "length": 18,
        "offset": 113,
        "surroundingCode": "        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)\n        await ws.poll_event(timeout=timeout)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "1dd952e2b7529215fe299ca4bf0a83a4f0b4233191b49b242c413877f4cb160a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _ of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 11,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 94,
        "surroundingCode": "from docutils import nodes\nfrom sphinx import addnodes, application\nfrom sphinx.locale import _\nfrom sphinx.util.docutils import SphinxDirective\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "506378a3f289ce1cd91921b47d91df63e0b2ce0a3fd0bc7a74c2b53bb19a6619"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 48,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 46,
        "length": 4,
        "offset": 116,
        "surroundingCode": "        self.origin_uri: Optional[str] = None\n        self.__extensions: Dict[str, Any] = {}\n        self.i: User = None\n        self.__cogs: Dict[str, str] = {}\n        self.strip_after_prefix = options.get(\"strip_after_prefix\", False)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "4055c0a1c31f5087849cad3828138fc2b2fc31826b90a4acd75177162bbcec0b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Type 'User' doesn't have expected attribute 'get'",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 258,
      "offset": 36,
      "length": 4,
      "code": {
        "startLine": 256,
        "length": 4,
        "offset": 167,
        "surroundingCode": "        self.is_blocked: bool = bool(data.get(\"is_blocked\", False))\n        self.is_muted: bool = bool(data.get(\"is_muted\", False))\n        self.details = UserDetails(data)\n        self._state = state\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "8960ac2eed15b25da7027986efe5abfa5d689d1d00967e59bfb8d1a0d5410421"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'ConnectionState', got 'NoteActions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 137,
      "offset": 42,
      "length": 10,
      "code": {
        "startLine": 135,
        "length": 10,
        "offset": 191,
        "surroundingCode": "        field = remove_dict_empty(field)\n        res = await self.http.request(Route('POST', '/api/notes/create'), json=field, auth=True, lower=True)\n        return Note(res[\"created_note\"], state=self)\n\n    async def create_renote(self, note_id: str) -> Note:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "7b2aea2c0df8b4132a488785c78b46d4f06fcadf4b0fa451fc88f16f1c3f1dcb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 39,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 158,
        "surroundingCode": "        self.http: HTTPClient = HTTPClient(connector=connector)\n        self._connection: ConnectionState = self._get_state(**options)\n        self.i: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "dc7711f15374e08fc6490139fd9081de2dee72ff5de4dc3eaecaec5257cb6c10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'MisskeyWebSocket', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 41,
      "offset": 37,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 114,
        "surroundingCode": "        self.i: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None\n\n    def _get_state(self, **options: Any) -> ConnectionState:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "e3b1a8452df9b88f26b674503a3087f2c14a72571d5f8277b469a6767162dd94"
}]}