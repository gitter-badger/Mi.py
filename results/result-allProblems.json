{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Name '__path__' can be undefined",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/__init__.py",
      "language": "Python",
      "line": 9,
      "offset": 46,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 68,
        "surroundingCode": "__version__ = \"2.1.0\"\n\n__path__ = __import__(\"pkgutil\").extend_path(__path__, __name__)\n\nfrom .abc import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "c1927ac68dd62bc25e440ca9032a112270f85a0b7318afc2358f05e7bb4fa4e9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Improper first parameter",
  "severity": "Moderate",
  "comment": "Usually first parameter of such methods is named 'mcs'",
  "detailsInfo": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 14,
      "offset": 17,
      "length": 3,
      "code": {
        "startLine": 12,
        "length": 3,
        "offset": 38,
        "surroundingCode": "\nclass CogMeta(type):\n    def __new__(cls, *args: Tuple[Any], **kwargs: Dict[str, Any]):\n        name, bases, attrs = args\n        attrs['__cog_name__'] = kwargs.pop(\"name\", name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodParametersInspection"
  },
  "hash": "9836dd99bfb11ba11156bc293f5b667769fdf142de27f34850c2ab20b6b68f76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Improper first parameter",
  "severity": "Moderate",
  "comment": "Usually first parameter of such methods is named 'cls'",
  "detailsInfo": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 57,
      "offset": 18,
      "length": 4,
      "code": {
        "startLine": 55,
        "length": 4,
        "offset": 41,
        "surroundingCode": "        return new_cls\n\n    def __init__(self, *args: Tuple[Any], **kwargs: Dict[str, Any]):\n        super().__init__(*args, **kwargs)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodParametersInspection"
  },
  "hash": "404df80b47eb6f93ce7fddc9298e6b0fe9559ca2afe2fbe9ce3590a93b84537a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2079,
      "code": {
        "startLine": 1,
        "length": 2079,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom abc import abstractmethod\nfrom types import ModuleType"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b705843818de37ec91290a668117d50337b8d94fb471f98df9acac149a703e3c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 19,
      "code": {
        "startLine": 1,
        "length": 19,
        "offset": 0,
        "surroundingCode": "from .bot import *\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "5033754b0d49ff970205bad4266193c18c57f26de42e587841e8aa6df86b0d1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 242,
      "code": {
        "startLine": 1,
        "length": 242,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "92abaf20cdaca6c493269b806864501f3ab96849853efb22c43d74ab908c4c3c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 486,
      "code": {
        "startLine": 1,
        "length": 486,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "a9baa10b741e6a0650d2714c5e52f5574ad9926325b8b4b6305fc03afcbba621"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 59,
      "code": {
        "startLine": 1,
        "length": 59,
        "offset": 0,
        "surroundingCode": "from .chat import *\nfrom .ext import *\nfrom .note import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2fe5ad4e1df637d5f629205245baf97fd0f3aeb0e34d0112f40d4fff2732552a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/api/follow.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3002,
      "code": {
        "startLine": 1,
        "length": 3002,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\nimport asyncio\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "ea70b16be5533a833db02c71b51fe23c96f9d2e844c756fc6f96ffa17ac32561"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/api/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 46,
      "code": {
        "startLine": 1,
        "length": 46,
        "offset": 0,
        "surroundingCode": "from .favorite import *\nfrom .follow import *\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "497bc477e02c48e1fcffb46148f69cab144b91c40084a5549bc170fc8da5eca7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/api/favorite.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 842,
      "code": {
        "startLine": 1,
        "length": 842,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\nimport asyncio\nfrom typing import TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "1594934037a8a0694b9014a216602297ae4b6152643d5fffcef0b8232b591e84"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/tasks/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1764,
      "code": {
        "startLine": 1,
        "length": 1764,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom typing import Any, Callable, Coroutine, Dict, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "949712ed0028ade8c42845fcdd8eae71ee44bae345d83baac7829c489d23ac93"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 7306,
      "code": {
        "startLine": 1,
        "length": 7306,
        "offset": 0,
        "surroundingCode": "\"\"\"Commands FrameWork用のCore部分\"\"\"\n\nfrom __future__ import annotations"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "bb00bb6ecb96f8ebe5690f3cc4a7046a867da157f07cd0c8df267744658e138c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3695,
      "code": {
        "startLine": 1,
        "length": 3695,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport inspect"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "340468a8aaee40e6f86fd29f29bdd8eec47037ffbec9afa33392643ab3e30173"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 973,
      "code": {
        "startLine": 1,
        "length": 973,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom typing import Dict\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "bdec77261be5c6de6a9a19fd1f8bed75c87998342296f6dbc1bce32c719855af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/view.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5815,
      "code": {
        "startLine": 1,
        "length": 5815,
        "offset": 0,
        "surroundingCode": "\"\"\"\nThe MIT License (MIT)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "09bb057492e7579ea73c691633008f311cd5df2b3668fa7a22b5e84ab780ed9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/_types.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 39,
      "code": {
        "startLine": 1,
        "length": 39,
        "offset": 0,
        "surroundingCode": "class _BaseCommand:\n    __slots__ = ()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "05c6cd7aeffd753a6bac5118f10a0381c59491a34832a552a412d17fb47a480f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 78,
      "code": {
        "startLine": 1,
        "length": 78,
        "offset": 0,
        "surroundingCode": "from .cog import *\nfrom .core import *\nfrom .bot import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "50a689f1e551370844f8d9dd0956a821da09386c7eeaa2c2b9b21d06e090e029"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 45,
      "code": {
        "startLine": 1,
        "length": 45,
        "offset": 0,
        "surroundingCode": "from .commands import *\nfrom .tasks import *\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "b59cb38d9d5c9463bb5aa7b4a6caf801edb4c0288c0a8e2b6b6957629addbd95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 396,
      "code": {
        "startLine": 1,
        "length": 396,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e1a7552ed2559873f6e442bff47950145be8bf132641c23821e9c0b79d918228"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 280,
      "code": {
        "startLine": 1,
        "length": 280,
        "offset": 0,
        "surroundingCode": "from typing import List, TypedDict\n\nfrom mi.types.user import User"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "1453f4ba7dba80afc26492ceb7d628a7638e5edcded23638c6e4af8139cf12bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2135,
      "code": {
        "startLine": 1,
        "length": 2135,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, List, Optional, TypedDict\n\nfrom .drive import File"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "01bb10b941a77f0152ff8051060c1431e304aa3a0166d5434f9168522edb1bb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2678,
      "code": {
        "startLine": 1,
        "length": 2678,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, List, Optional, TypedDict\n\nfrom .drive import File"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "f5324af1c1229eaf8a5f3c52cbcac90e04a3f77596399cfe00783d74dfc0ef88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 684,
      "code": {
        "startLine": 1,
        "length": 684,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, TypedDict\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "77fa748269fd7e73d8efdf81f0239128e84fd936eecc4272ca8d9241f136cd4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 225,
      "code": {
        "startLine": 1,
        "length": 225,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional, TypedDict\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "0444d4d18dfb2493a2ff5860396d05b3465ec61926ba8816c0f3d7ef133b04d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 163,
      "code": {
        "startLine": 1,
        "length": 163,
        "offset": 0,
        "surroundingCode": "\"\"\"\nmi.types\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "1260ebf4b1fb0de626820ae838aa75b2ef50dfe7b80f8c6e1f01d39e0c62a5f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1776,
      "code": {
        "startLine": 1,
        "length": 1776,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, Optional, TYPE_CHECKING, TypedDict"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "0d8ee3ed1d9697b6f7e8667484e074cc5dd8c94ffc06c16966b60dfabad41e0d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3120,
      "code": {
        "startLine": 1,
        "length": 3120,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, List, Optional\n\nfrom mi.models.drive import RawFile"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "419ddfec0acfdb3d1df59ca55ae37a2264e1fb138bb7c53a69f52c3f2c51dc00"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/poll.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 646,
      "code": {
        "startLine": 1,
        "length": 646,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional\n\nfrom mi.types.note import Poll as PollPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "10ceda47d9225c4b729c0cbeb26e4499b7488108ce790ecdadd38bb752bf529e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3524,
      "code": {
        "startLine": 1,
        "length": 3524,
        "offset": 0,
        "surroundingCode": "from dataclasses import dataclass\nfrom typing import List, Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "7a3dd11c549cfbda33efc37c7c14cc9d22dcb3a8b46ef3207f0d2f49405a7abb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1556,
      "code": {
        "startLine": 1,
        "length": 1556,
        "offset": 0,
        "surroundingCode": "from typing import Any, Dict, Optional\n\nfrom mi.types.drive import (File as FilePayload, Folder as FolderPayload, Properties as PropertiesPayload)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d098bb1a772234ee0717c4a7a6d1e6a2b0c08afd38e471dc3c4b0dcbc694db95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 472,
      "code": {
        "startLine": 1,
        "length": 472,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional\n\nfrom mi.types.emoji import Emoji as EmojiPayload"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e1de440808d36c470ee53fee88405f9994ce0404b82af2afc71a65d964803822"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 44,
      "code": {
        "startLine": 1,
        "length": 44,
        "offset": 0,
        "surroundingCode": "from .instance import *\nfrom .user import *\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "0e9659718310b120e425a2e5ae23bfd07113c105050c110eff4f04a1a3f933e9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 377,
      "code": {
        "startLine": 1,
        "length": 377,
        "offset": 0,
        "surroundingCode": "from dataclasses import dataclass\nfrom typing import Optional\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "3c0a55c944b5dd1b90bc1d230516b8b9d9d01e0a127880f574ab9d3b6c1b2825"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/chat.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1234,
      "code": {
        "startLine": 1,
        "length": 1234,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import List, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "64fb4c2f275d3db816fdc41539cdd65d3760098855f66c94b777052e84af2fdd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/http.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 4263,
      "code": {
        "startLine": 1,
        "length": 4263,
        "offset": 0,
        "surroundingCode": "\"\"\"Mi.pyのWebSocket部分\"\"\"\n\nimport json"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "78940fe0935f6fd69dc89f7e6238069943f53b9bde7f297db0f53a1b42c8006d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/note.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 15311,
      "code": {
        "startLine": 1,
        "length": 15311,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Dict, List, Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "c67d37b3b6776300e2ad933a075048107eb87601d181a13d1f90751077421eed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 9969,
      "code": {
        "startLine": 1,
        "length": 9969,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import Any, AsyncIterator, Dict, List, Optional, TYPE_CHECKING, Tuple"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "f99a952b7a83efab7ca10c6c90b86f0de93c3764065064e03feb4cdd7dd04bdf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/chart.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 764,
      "code": {
        "startLine": 1,
        "length": 764,
        "offset": 0,
        "surroundingCode": "from typing import List, Optional\n\nfrom mi.state import ConnectionState"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "2a0432c580610fe8d2119899aae8880a9ca2c1ae4f13d3f696c715171a82eb14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/drive.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3162,
      "code": {
        "startLine": 1,
        "length": 3162,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "8b95a073fed913021295fbba7e79f076a4513ebb9f0281340df2703e703d8612"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/emoji.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 995,
      "code": {
        "startLine": 1,
        "length": 995,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "54595f81cd914327f9735d1aac030478f45fbefc2821e624631db54c2c28b1f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 24145,
      "code": {
        "startLine": 1,
        "length": 24145,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport asyncio"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "5b2e2c15a263c0c632d2cfa76e76e7e8108413a52a8b4413d24b16396ddb0e4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/utils.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 5609,
      "code": {
        "startLine": 1,
        "length": 5609,
        "offset": 0,
        "surroundingCode": "\"\"\"\nMi.pyを使用する上でちょっとした際に便利なツール一覧\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "f0e7a43a23643ac3751471ec94d5a1c22d878aaf3851d7116c134a9120df3e68"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 17424,
      "code": {
        "startLine": 1,
        "length": 17424,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport asyncio"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "8498d284a6b5d4efba14ecac552ffc63ee92fff40a6ed2fe3e4fd1b8aa17c45d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/config.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 492,
      "code": {
        "startLine": 1,
        "length": 492,
        "offset": 0,
        "surroundingCode": "from typing import Any, Optional\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d05035adf0a8e10c209158795df95690cae0b8704a9336c9859c405f168ea664"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/router.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2054,
      "code": {
        "startLine": 1,
        "length": 2054,
        "offset": 0,
        "surroundingCode": "\"\"\"Misskeyのチャンネルへの接続や、メッセージのキャプチャ等のWebSocket関連\"\"\"\n\nfrom __future__ import annotations"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d15f04097418791c8c4545d661e41cf786878087f8d3ad943e3d999ee75de8bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1606,
      "code": {
        "startLine": 1,
        "length": 1606,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport json"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "76bc70738ca6a8b0d39c5a31278d777ca3bc88c8bd2668b625021af9b7221d30"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/__init__.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 624,
      "code": {
        "startLine": 1,
        "length": 624,
        "offset": 0,
        "surroundingCode": "__title__ = \"misskey\"\n__author__ = \"yupix\"\n__license__ = \"MIT\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "dd346589d47f55842e584b3ad965bae6c9f395299dabee13bb54a80c1bc69709"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 4757,
      "code": {
        "startLine": 1,
        "length": 4757,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import AsyncIterator, Dict, List, Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "22c870c0d94accddc1f1a4621f98d26f5331b7c797fa308f57da304e0e7d04e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/exception.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2118,
      "code": {
        "startLine": 1,
        "length": 2118,
        "offset": 0,
        "surroundingCode": "__all__ = (\n    \"CogNameDuplicate\",\n    \"CredentialRequired\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "a24198ce1a8dc06560f85db42e3ac9da9a075356199d0f79f1aa5142d5c8c506"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/iterators.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2140,
      "code": {
        "startLine": 1,
        "length": 2140,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nfrom typing import AsyncIterator, Optional, TYPE_CHECKING"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e872d6fc4b0b80ef6f1ed568f8054b1fbfac961ce12dbb31ad2ba0575b40d38f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "mi/next_utils.pyx",
      "language": "Cython",
      "line": 1,
      "offset": 1,
      "length": 322,
      "code": {
        "startLine": 1,
        "length": 322,
        "offset": 0,
        "surroundingCode": "import cython\n\n@cython.boundscheck(False)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "d6a046d0544980d4694045eae3fb3e964eed89d2ba663696026fdd0efaf4b13b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "docs/conf.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 3193,
      "code": {
        "startLine": 1,
        "length": 3193,
        "offset": 0,
        "surroundingCode": "# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "65a0af7a759dd7e8517f64710620aa08080bcd8756ea2a24a7267fc8999f33a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 8408,
      "code": {
        "startLine": 1,
        "length": 8408,
        "offset": 0,
        "surroundingCode": "from __future__ import annotations\n\nimport importlib"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "9934ba4cabfc5b37bbc9bdbc7aff84dd8adf6907a0bee890a8c3557af5ff6afa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_class.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 943,
      "code": {
        "startLine": 1,
        "length": 943,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom mi import Note\nfrom mi.ext import commands, tasks"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "04d6243e7f16554411edffcfa08c5159f204781dff1ece667657a459a5644d90"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_instance.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 888,
      "code": {
        "startLine": 1,
        "length": 888,
        "offset": 0,
        "surroundingCode": "import asyncio\nfrom mi import Client, Drive, Note, Router\nfrom mi.ext import tasks"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "8a7b396fb6e4b8dc0644bee0bf949fcdb24952ab132079f0e3cc2fd7ed01cd56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "setup.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 1415,
      "code": {
        "startLine": 1,
        "length": 1415,
        "offset": 0,
        "surroundingCode": "import pathlib\n\nfrom setuptools import Extension, find_packages, setup"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "57254a2a602cec11a596f32c3f88e9aad5a3d8d46c80859d9e96df7f3d3e36ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "severity": "High",
  "comment": "Package requirements 'aiocache', 'aiohttp', 'emoji', 'cython' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "requirements.txt",
      "language": "TEXT",
      "line": 1,
      "offset": 1,
      "length": 30,
      "code": {
        "startLine": 1,
        "length": 30,
        "offset": 0,
        "surroundingCode": "aiocache\naiohttp\nemoji"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "7bdf580f5c502e422644fafd0c5291504d69dead33397737a8392c214a35802b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `on_message` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_class.py",
      "language": "Python",
      "line": 28,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 26,
        "length": 10,
        "offset": 51,
        "surroundingCode": "        self.task.stop()  # タスクを止める\n\n    async def on_message(self, note: Note):\n        print(\n            f\"{note.author.instance.name} | {note.author.username}さんがノートしました: {note.content}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "8c53e9edfe0562802e59493d89444a0e584f03caf097ba4b36c49ca2c0f3c571"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 45,
      "offset": 101,
      "length": 9,
      "code": {
        "startLine": 43,
        "length": 9,
        "offset": 162,
        "surroundingCode": "\n    def _get_state(self, **options: Any) -> ConnectionState:\n        return ConnectionState(dispatch=self.dispatch, http=self.http, loop=self.loop, client=self, **options)\n\n    async def on_ready(self, ws: ClientWebSocketResponse):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "5b311d329710f8f3715df394ee4532d66e89e52563884711d99a638f7dbf57e6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'command_prefix' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 34,
      "offset": 24,
      "length": 34,
      "code": {
        "startLine": 32,
        "length": 34,
        "offset": 72,
        "surroundingCode": "\nclass BotBase(CommandManager, AbstractBotBase):\n    def __init__(self, command_prefix: Optional[str]=None, **options: Dict[Any, Any]):\n        \"\"\"\n        .. deprecated:: v2.3.0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2a81c8f2b6f579423935a1f918d74d05bf3407c10b92c1fd2ebd260a6668dd87"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'kwargs' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 20,
      "offset": 42,
      "length": 8,
      "code": {
        "startLine": 18,
        "length": 8,
        "offset": 71,
        "surroundingCode": "\nclass Command(_BaseCommand):\n    def __init__(self, func, regex: str, **kwargs):\n        if not asyncio.iscoroutinefunction(func):\n            raise TypeError(f'{func}はコルーチンでなければなりません')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "498f2aae086b49ecc9d0cc822a6ea4a18848f7228a1397ebdb3f8a56813a5c69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'state' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/note.py",
      "language": "Python",
      "line": 79,
      "offset": 43,
      "length": 22,
      "code": {
        "startLine": 77,
        "length": 22,
        "offset": 55,
        "surroundingCode": "\nclass File:\n    def __init__(self, raw_data: RawFile, state: ConnectionState):\n        self.__raw_data = raw_data\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "a7f9088e4a28223e2085d9dbbf263c26b378f1a09d675a695e37b2819a524741"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 64,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 62,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n\ndef depart_attributetable_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c2783c30b39c7803d6b306a324dc75470ecd2c43010974e1255a541f02bd66c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 68,
      "offset": 44,
      "length": 4,
      "code": {
        "startLine": 66,
        "length": 4,
        "offset": 45,
        "surroundingCode": "\n\ndef depart_attributetablecolumn_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c0259b8a9d9ede31374c99ce5cde5b08e498fd8bffb7a3c6c49cf23b479e1435"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 72,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 70,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetabletitle_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1ba68d3e3cf22827c0089314d3801ff5f436e64e7691ac872cd842cd9ddc9c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 76,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetablebadge_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8bfdbb91e0b2d3edac3af7876b27f24741b310c30acabdc5bf9968f78033810c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 80,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 78,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetable_item_node(self, node):\n    self.body.append('</li>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f75f0f54a460710801f1f0f91151b48653daa46c27bb5353ec80f6035762dde6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'fromdocname' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 170,
      "offset": 62,
      "length": 16,
      "code": {
        "startLine": 168,
        "length": 16,
        "offset": 63,
        "surroundingCode": "\n\ndef process_attributetable(app: application.Sphinx, doctree, fromdocname: str):\n    env = app.builder.env\n    lookup = build_lookup_table(env)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "26e407b636c2a5b80976ded6e8fea8a6919ebaa54eaaf350cc984b9224f26842"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "severity": "Moderate",
  "comment": "Shadows built-in name 'copyright'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "docs/conf.py",
      "language": "Python",
      "line": 22,
      "offset": 1,
      "length": 9,
      "code": {
        "startLine": 20,
        "length": 9,
        "offset": 19,
        "surroundingCode": "\nproject = \"Mi.py\"\ncopyright = \"2021, yupix\"\nauthor = \"yupix\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "518e8a6855e556d77b10ab8d9762c8491ff95a9ba739cda42635eae30843e35b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 15,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 13,
        "length": 14,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "864af21adf92daee912befdfe8f40cfa477ac9bf7c187b09be85aaf18b2f8a01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 19,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 17,
        "length": 20,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablecolumn(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "73d0b2a4abb082fe0874fde273575ff2420d4985fff7d7d9ab649c69dc5bad41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 23,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 21,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetabletitle(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "073e0b2a7f7627abb0424f2a5bd62947f3ae3c6f744626b99321a86ae796cc1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 27,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 25,
        "length": 25,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetableplaceholder(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2c6dd13b6676bf62a49ec1f5bc57bc44c5b0edf019532032837c286bc69ea817"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 31,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 29,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablebadge(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7bb23b02ec5ff0f3d57b5e25ca91326a0f4e262100664c05154fd27b8276f6a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 35,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable_item(nodes.Part, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "acdd07f0f692222f4a4e65e7f56ebb34d1462eb9a94d73321ed345a55e6fb59c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 221,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 219,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        except asyncio.CancelledError:\n            pass\n        except Exception:\n            try:\n                await self.__on_error(event_name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "a59ae01cf160cb292cf6492534253a1124262460c939838c6297dafb9fad511f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 150,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 148,
        "length": 9,
        "offset": 71,
        "surroundingCode": "        except asyncio.CancelledError:\n            pass\n        except Exception:\n            try:\n                await self.__on_error(event_name)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "f89231b8cdd53cc3de41d6044c67daea8cd3cf67c11b2dcfed4b518f905b28f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Invalid TypedDict definition and usages",
  "severity": "High",
  "comment": "TypedDict \"Properties\" has no key 'avg_color'",
  "detailsInfo": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/drive.py",
      "language": "Python",
      "line": 10,
      "offset": 52,
      "length": 11,
      "code": {
        "startLine": 8,
        "length": 11,
        "offset": 133,
        "surroundingCode": "        self.width: int = data['width']\n        self.height: int = data['height']\n        self.avg_color: Optional[float] = data.get('avg_color')\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypedDictInspection"
  },
  "hash": "947456bf3fc20ebf7852b9937705dcb1bc6159788614a04c9331b130805c2e43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _inject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 145,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 143,
        "length": 11,
        "offset": 65,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: 作る\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "1591c8db08cdc55bcce7071151fe0c7969aafa7e06625d103dc680fa3186921f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _eject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 154,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 152,
        "length": 10,
        "offset": 28,
        "surroundingCode": "            return\n\n        cog._eject(self)\n\n        return cog"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "8fd0d3f8dbadc3dbb41ba9d4d5c5ba2f6c45e2a5a8c8dc802a4fad76357e1848"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _on_message of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 324,
      "offset": 9,
      "length": 23,
      "code": {
        "startLine": 322,
        "length": 23,
        "offset": 136,
        "surroundingCode": "        note = Note(RawNote(message), state=self)\n        # Router(self.http.ws).capture_message(note.id) TODO: capture message\n        self.client._on_message(note)\n\n    async def get_i(self) -> User:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "99e6ee13f5814ecaf045bdcda92cb6befe25cc8fa98e285d374e85d013f6fd7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 34,
      "offset": 26,
      "length": 18,
      "code": {
        "startLine": 32,
        "length": 18,
        "offset": 89,
        "surroundingCode": "        ws = cls(socket)\n        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "cb82104c3651bf1b7fc6c1189ce4be6b91029dd662057f0380dd37f21eacd948"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 35,
      "offset": 31,
      "length": 18,
      "code": {
        "startLine": 33,
        "length": 18,
        "offset": 113,
        "surroundingCode": "        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)\n        await ws.poll_event(timeout=timeout)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "cb7208e03602cb7ce798da42117e6a9be65adfc02c8308ed1c3eb87dc8cf92d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _ of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 11,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 94,
        "surroundingCode": "from docutils import nodes\nfrom sphinx import addnodes, application\nfrom sphinx.locale import _\nfrom sphinx.util.docutils import SphinxDirective\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "506378a3f289ce1cd91921b47d91df63e0b2ce0a3fd0bc7a74c2b53bb19a6619"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E252 missing whitespace around parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 34,
      "offset": 53,
      "length": 1,
      "code": {
        "startLine": 32,
        "length": 1,
        "offset": 101,
        "surroundingCode": "\nclass BotBase(CommandManager, AbstractBotBase):\n    def __init__(self, command_prefix: Optional[str]=None, **options: Dict[Any, Any]):\n        \"\"\"\n        .. deprecated:: v2.3.0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "84e9dd449dbec8740241c077a4c841d8c9e1596dd3ae635eada3cf39d80cd8c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E252 missing whitespace around parameter equals",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 34,
      "offset": 54,
      "length": 4,
      "code": {
        "startLine": 32,
        "length": 4,
        "offset": 102,
        "surroundingCode": "\nclass BotBase(CommandManager, AbstractBotBase):\n    def __init__(self, command_prefix: Optional[str]=None, **options: Dict[Any, Any]):\n        \"\"\"\n        .. deprecated:: v2.3.0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "62ae10dbc7851b6ce353e6b6111c18db55bf26ed46a3b5e54047ff805f26c5a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/poll.py",
      "language": "Python",
      "line": 12,
      "offset": 1,
      "length": 14,
      "code": {
        "startLine": 10,
        "length": 14,
        "offset": 47,
        "surroundingCode": "        self.is_voted: bool = data[\"isVoted\"]\n\nclass RawPoll:\n    def __init__(self, data: PollPayload):\n        self.multiple: Optional[bool] = data.get(\"multiple\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "68dc1b396bb7d006e0dd812e68d9d967506a4eb5cdd41145fb32473bc41ac50f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (132 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/poll.py",
      "language": "Python",
      "line": 16,
      "offset": 113,
      "length": 9,
      "code": {
        "startLine": 14,
        "length": 9,
        "offset": 237,
        "surroundingCode": "        self.multiple: Optional[bool] = data.get(\"multiple\")\n        self.expires_at: Optional[int] = data.get(\"expires_at\")\n        self.choices: Optional[List[RawPollChoices]] = [RawPollChoices(i) for i in data['choices']] if data.get(\"choices\") else None\n        self.expired_after: Optional[int] = data.get(\"expired_after\")\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "726abc8aa6746fc0cb90dc4f91a2313ca27b857f125e06f9ea2714c1c64ca25c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/note.py",
      "language": "Python",
      "line": 550,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 548,
        "length": 1,
        "offset": 178,
        "surroundingCode": "        return await self.__state.create_renote(self.id)\n\n    async def get_replies(self, since_id: Optional[str] = None, until_id: Optional[str] = None, limit: int = 10) -> List[Note]:\n        \"\"\"\n        ノートに対する返信を取得します"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "50dc320b83b33736f07c3d20e705da550fc66abe4a98e1679a94ef82515959d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/note.py",
      "language": "Python",
      "line": 614,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 612,
        "length": 1,
        "offset": 184,
        "surroundingCode": "\n        visibility = self.visibility or visibility or 'public'\n        return await self.__state.create_quote(content=content, visibility=visibility, visible_user_ids=visible_user_ids,\n                                               cw=cw,\n                                               local_only=local_only, no_extract_mentions=no_extract_mentions,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "03e5d1c1d615c553d3cf0af0eafdb8a4be7992f9c9d7ab014ec617deb952580a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 8,
      "offset": 106,
      "length": 17,
      "code": {
        "startLine": 6,
        "length": 17,
        "offset": 167,
        "surroundingCode": "from mi.emoji import Emoji\nfrom mi.models.user import RawUser\nfrom mi.types.user import (Channel as ChannelPayload, FieldContent as FieldContentPayload, PinnedNote as PinnedNotePayload,\n                           PinnedPage as PinnedPagePayload)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "701ac95ac18f2395328489c8d2339fcc0ff1b80e019b53ebfdd5b3f3dd4413cd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 88,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 86,
        "length": 4,
        "offset": 285,
        "surroundingCode": "        self.channel: Optional[Channel] = Channel(data[\"channel\"]) if data.get(\"channel\") else None\n        self.local_only: Optional[bool] = data.get(\"local_only\")\n        self.emojis: Optional[List[Emoji]] = [Emoji(i, state=state) for i in data[\"emojis\"]] if data.get(\"emojis\") else None\n        self.reactions: Optional[Dict[str, Any]] = data.get(\"reactions\")\n        self.renote_count: Optional[int] = data.get(\"renote_count\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "eee1ee8dda2ff37cca7aa638cf68328f9d376d0f1bcf7b8e8bdde0ad9e6f7340"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (127 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 293,
      "offset": 118,
      "length": 8,
      "code": {
        "startLine": 291,
        "length": 8,
        "offset": 188,
        "surroundingCode": "                                           host=self.__raw_user.host)\n\n    def get_followers(self, until_id: Optional[str] = None, limit: int = 10, get_all: bool = False) -> AsyncIterator[Followee]:\n        \"\"\"\n        ユーザーのフォロワー一覧を取得します"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "35b225bb6a44238754c553f4109214c9cbbd480a95412e09c736f23e8ccf9ff7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 120,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 118,
        "length": 1,
        "offset": 255,
        "surroundingCode": "                          limit: int = 10, ) -> List[Note]:\n        res = await self.http.request(Route('POST', '/api/notes/replies'),\n                                      json={\"noteId\": note_id, \"sinceId\": since_id, \"untilId\": until_id, \"limit\": limit},\n                                      auth=True, lower=True)\n        return [Note(RawNote(i), state=self.client) for i in res]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "13607b395ecaff30af5c96fd31137e1855f5d0a0829d4790e4c71774e2b939dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 428,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 426,
        "length": 1,
        "offset": 243,
        "surroundingCode": "        \"\"\"\n        args = remove_dict_empty({'userId': user_id, 'groupId': group_id, 'text': content, 'fileId': file_id})\n        data = await self.http.request(Route('POST', '/api/messaging/messages/create'), json=args, auth=True, lower=True)\n        return Chat(data, state=self)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7b2219d4b73a24843b8496f5f4d8375d67af8c6bf287c71a919bd1f49624b431"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 534,
      "offset": 119,
      "length": 4,
      "code": {
        "startLine": 532,
        "length": 4,
        "offset": 166,
        "surroundingCode": "            loop = True\n            while loop:\n                get_data = await self.http.request(Route('POST', '/api/users/followers'), json=data, auth=True, lower=True)\n                if len(get_data) > 0:\n                    data[\"untilId\"] = get_data[-1][\"id\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "cac02d27815e27e9378d90d55f39a4882facc782711a7c0d10e2132bbd886e4c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 566,
      "offset": 119,
      "length": 4,
      "code": {
        "startLine": 564,
        "length": 4,
        "offset": 268,
        "surroundingCode": "    async def show_file(self, file_id: Optional[str], url: Optional[str]) -> Drive:\n        data = remove_dict_empty({\"fileId\": file_id, \"url\": url})\n        return Drive(await self.http.request(Route('POST', '/api/admin/drive/show-file'), json=data, auth=True, lower=True),\n                     state=self)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "97d676bf2b73e75a7ced9e05a78ee2fe16d3ab770620fafbe0cb87d0e978e538"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 570,
      "offset": 118,
      "length": 4,
      "code": {
        "startLine": 568,
        "length": 4,
        "offset": 173,
        "surroundingCode": "\n    async def remove_file(self, file_id: str) -> bool:\n        return bool(await self.http.request(Route('POST', '/api/drive/files/delete'), json={'fileId': file_id}, auth=True))\n\n    async def get_user_notes("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8b35eb88efe9a7499edbfaf009bb80fc5ab1202dccb7c74d30409b311ba4e2b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 657,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 655,
        "length": 1,
        "offset": 281,
        "surroundingCode": "            with open(to_file, \"rb\") as f:\n                args = remove_dict_empty({\"isSensitive\": is_sensitive, \"force\": force, \"name\": f\"{name}\", 'file': f})\n                res = await self.http.request(Route('POST', '/api/drive/files/create'), data=args, auth=True, lower=True)\n        elif to_file is None and to_url:  # URLからアップロードする\n            args = {\"url\": to_url, \"force\": force, \"isSensitive\": is_sensitive}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "3ff4a00234cfa37385ed090ca54546b3d343afe65a345d19f0ba8e46148e7b91"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 660,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 658,
        "length": 1,
        "offset": 258,
        "surroundingCode": "        elif to_file is None and to_url:  # URLからアップロードする\n            args = {\"url\": to_url, \"force\": force, \"isSensitive\": is_sensitive}\n            res = await self.http.request(Route('POST', '/api/drive/files/upload-from-url'), json=args, auth=True, lower=True)\n        else:\n            raise InvalidParameters(\"path または url のどちらかは必須です\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "7149d532eaebaf45abd977c769fad73886c8e904ceedfcda6a96b227efa9fdda"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 232,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 230,
        "length": 1,
        "offset": 182,
        "surroundingCode": "            until_data: int = 0\n    ) -> AsyncIterator[Note]:\n        return self._connection.get_user_notes(user_id=user_id, since_id=since_id, include_my_renotes=include_my_renotes,\n                                               include_replies=include_replies, with_files=with_files,\n                                               until_id=until_id, limit=limit, get_all=get_all, exclude_nsfw=exclude_nsfw,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b4e34978c48d25e821a4550a594829192146bfc4efe856f9763801141a8e7fc6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 234,
      "offset": 110,
      "length": 12,
      "code": {
        "startLine": 232,
        "length": 12,
        "offset": 334,
        "surroundingCode": "        return self._connection.get_user_notes(user_id=user_id, since_id=since_id, include_my_renotes=include_my_renotes,\n                                               include_replies=include_replies, with_files=with_files,\n                                               until_id=until_id, limit=limit, get_all=get_all, exclude_nsfw=exclude_nsfw,\n                                               file_type=file_type, since_date=since_date, until_data=until_data)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "34d1e0650e7e35337977aa9cfe8fc12bc9fb4df11d1a4621fd385f3248049cbd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (121 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 442,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 440,
        "length": 1,
        "offset": 175,
        "surroundingCode": "        if file_ids is None:\n            file_ids = []\n        return await self._connection.note.send(content, visibility=visibility, visible_user_ids=visible_user_ids, cw=cw,\n                                                local_only=local_only, no_extract_mentions=no_extract_mentions,\n                                                no_extract_hashtags=no_extract_hashtags, no_extract_emojis=no_extract_emojis,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "b5cc588bd8156b477760b460d444768a834eb8b3db98de2ad2bd0e955b70ca97"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (125 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 444,
      "offset": 108,
      "length": 17,
      "code": {
        "startLine": 442,
        "length": 17,
        "offset": 341,
        "surroundingCode": "        return await self._connection.note.send(content, visibility=visibility, visible_user_ids=visible_user_ids, cw=cw,\n                                                local_only=local_only, no_extract_mentions=no_extract_mentions,\n                                                no_extract_hashtags=no_extract_hashtags, no_extract_emojis=no_extract_emojis,\n                                                reply_id=reply_id, renote_id=renote_id, channel_id=channel_id,\n                                                file_ids=file_ids,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "8eb6607fd54c0f1350a71122ff07cb10cdc5bfc03951510378a7aaf72b2aecdc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E131 continuation line unaligned for hanging indent",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 529,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 527,
        "length": 1,
        "offset": 84,
        "surroundingCode": "            origin_uri = (\n                _origin_uri.group(0)\n                    .replace(\"wss\", \"https\")\n                    .replace(\"ws\", \"http\")\n                    .replace(\"/streaming\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "da0191a64b3730e5a0bd3a29c72bfbf977509949fdccc2c5d8cafed3b5d8a7d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (123 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/instance.py",
      "language": "Python",
      "line": 127,
      "offset": 115,
      "length": 8,
      "code": {
        "startLine": 125,
        "length": 8,
        "offset": 154,
        "surroundingCode": "        AsyncIterator[User]\n        \"\"\"\n        return self.__state.get_users(limit=limit, offset=offset, sort=sort, state=state, origin=origin, username=username,\n                                      hostname=hostname, get_all=get_all)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "42437c61bf77bb515cb8029f4aaac8e1dfc4a7b2cd91f82ab2ff4f8a34689c3c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (126 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "mi/iterators.py",
      "language": "Python",
      "line": 61,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 59,
        "length": 1,
        "offset": 241,
        "surroundingCode": "                    yield User(RawUser(i), state=self._state)\n                args['offset'] = args['offset'] + len(res)\n                res = await self._state.http.request(Route('POST', '/api/admin/show-users'), json=args, auth=True, lower=True)\n                if len(res) == 0:\n                    break"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "9f4c7a70beeb4fee68a333686e2a9d5858d175dd39290afdfc0b1c890d42f623"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "severity": "Moderate",
  "comment": "PEP 8: E303 too many blank lines (2)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 205,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 203,
        "length": 20,
        "offset": 6,
        "surroundingCode": "\n\n    for attr in members:\n        attrlookup = f'{fullname}.{attr}'\n        key = _('Attributes')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "376ef05a87c14fc7fade3033bdd5cdb8c56b2260a906a49d017cc4cc3725235b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 49,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 116,
        "surroundingCode": "        self.origin_uri: Optional[str] = None\n        self.__extensions: Dict[str, Any] = {}\n        self.i: User = None\n        self.__cogs: Dict[str, Cog] = {}\n        self.strip_after_prefix = options.get(\"strip_after_prefix\", False)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "ca4838c3e3cf5366f3d4448518c856c45780a4975908d59d895adafdf9a569a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Bot', got 'BotBase' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 145,
      "offset": 27,
      "length": 4,
      "code": {
        "startLine": 143,
        "length": 4,
        "offset": 77,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: 作る\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "cf633abe70fd1c3435550ad157a439be2da0b33507649051d9d6f460a563c255"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'str', got 'tuple\\[Any\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 21,
      "offset": 40,
      "length": 4,
      "code": {
        "startLine": 19,
        "length": 4,
        "offset": 168,
        "surroundingCode": "        commands = {}\n        no_bot_cog = \"Commands or listeners must not start with cog_ or bot_ (in method {0.__name__}.{1})\"\n        new_cls = super().__new__(cls, name, bases, attrs, **kwargs)\n\n        for base in reversed(new_cls.__mro__):  # 多重継承を確認 !コマンドを登録"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "5d8bacb342c95e0f6de019d2a83d432525e3d67ea15ccb230319ae4dbd62790a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'dict\\[str, Any\\]', got 'tuple\\[Any\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/cog.py",
      "language": "Python",
      "line": 21,
      "offset": 53,
      "length": 5,
      "code": {
        "startLine": 19,
        "length": 5,
        "offset": 181,
        "surroundingCode": "        commands = {}\n        no_bot_cog = \"Commands or listeners must not start with cog_ or bot_ (in method {0.__name__}.{1})\"\n        new_cls = super().__new__(cls, name, bases, attrs, **kwargs)\n\n        for base in reversed(new_cls.__mro__):  # 多重継承を確認 !コマンドを登録"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "76b8f28cf6a65520e27bb9d7dd31f5b93f51366cf9de8b7314656d394fd2d4b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'Renote' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/note.py",
      "language": "Python",
      "line": 18,
      "offset": 29,
      "length": 4,
      "code": {
        "startLine": 16,
        "length": 4,
        "offset": 112,
        "surroundingCode": "        self.created_at = data[\"created_at\"]\n        self.user_id = data[\"user_id\"]\n        self.user = RawUser(data)\n        self.content: Optional[str] = data.get(\"text\", None)\n        self.cw = data[\"cw\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "4d25c257bbf9b0a2c7dda1754efe9177796549c7c29621213a7e175dfa2a8949"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'list\\[Emoji\\]', got 'list\\[RawEmoji\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/note.py",
      "language": "Python",
      "line": 49,
      "offset": 36,
      "length": 37,
      "code": {
        "startLine": 47,
        "length": 37,
        "offset": 150,
        "surroundingCode": "        self.replies_count: int = data[\"replies_count\"]\n        self.reactions: Dict[str, Any] = data[\"reactions\"]\n        self.emojis: List[Emoji] = [RawEmoji(i) for i in data[\"emojis\"]]\n        self.file_ids: Optional[List[str]] = data[\"file_ids\"]\n        self.files: List[File] = [RawFile(upper_to_lower(i)) for i in data[\"files\"]]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "354d00caaa6a2b1909ea6e6ac63faec018e670f9fd31a28b233f928c3369d9d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'list\\[File\\]', got 'list\\[RawFile\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/models/note.py",
      "language": "Python",
      "line": 51,
      "offset": 34,
      "length": 51,
      "code": {
        "startLine": 49,
        "length": 51,
        "offset": 168,
        "surroundingCode": "        self.emojis: List[Emoji] = [RawEmoji(i) for i in data[\"emojis\"]]\n        self.file_ids: Optional[List[str]] = data[\"file_ids\"]\n        self.files: List[File] = [RawFile(upper_to_lower(i)) for i in data[\"files\"]]\n        self.reply_id: Optional[str] = data[\"reply_id\"]\n        self.renote_id: Optional[str] = data[\"renote_id\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "8c2fa6ff000cfe62997cd7c106694ebe66d556dcbe6a977ade7b9be489195915"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'RawFile', got 'File' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/note.py",
      "language": "Python",
      "line": 350,
      "offset": 22,
      "length": 1,
      "code": {
        "startLine": 348,
        "length": 1,
        "offset": 70,
        "surroundingCode": "    @property\n    def files(self) -> List[File]:\n        return [File(i, state=self.__state) for i in self.__raw_data.files]\n\n    @property"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "2791f1d6d77dabe2e08a0d2ae5eb35cdf0837becab1bfb14f7ab81a80f5e140a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'dict' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 49,
      "offset": 16,
      "length": 44,
      "code": {
        "startLine": 47,
        "length": 44,
        "offset": 57,
        "surroundingCode": "\n    async def get_profile(self) -> User:\n        return await self.__state.get_user(user_id=self.id)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "44eee982bd495f28573e4e3433bd8e973cd879c1f7827bc2f62d4cf59502882b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'dict' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 290,
      "offset": 16,
      "length": 156,
      "code": {
        "startLine": 288,
        "length": 156,
        "offset": 57,
        "surroundingCode": "            ユーザーのプロフィールオブジェクト\n        \"\"\"\n        return await self.__state.get_user(user_id=self.__raw_user.id, username=self.__raw_user.name,\n                                           host=self.__raw_user.host)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "6600b98df70b4a850a747db25b2b6f430f0902e735edfd3fc99d797a04879a53"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Iterable\\[str\\]', got 'list\\[None\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/utils.py",
      "language": "Python",
      "line": 202,
      "offset": 31,
      "length": 6,
      "code": {
        "startLine": 200,
        "length": 6,
        "offset": 128,
        "surroundingCode": "        result[::2] = pattern.split(attr)\n        result[1::2] = [\"_\" + i.lower() for i in large]\n        default_key = \"\".join(result)\n        if replace_list.get(attr):\n            default_key = default_key.replace(attr, replace_list.get(attr))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "74391a3f2f9a12d4bc68bae504e37d32a0bd00f1b8a6a44cc9db8e9db8ce7066"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Iterable\\[str\\]', got 'list\\[None\\]' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/utils.py",
      "language": "Python",
      "line": 217,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 215,
        "length": 6,
        "offset": 109,
        "surroundingCode": "    result[::2] = pattern.split(text)\n    result[1::2] = [\"_\" + i.lower() for i in large]\n    return \"\".join(result)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "1adeda45c5af6a5c4e50953104a8f4e578d91fbe382039e6795f324cd423e89c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 40,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 38,
        "length": 4,
        "offset": 158,
        "surroundingCode": "        self.http: HTTPClient = HTTPClient(connector=connector)\n        self._connection: ConnectionState = self._get_state(**options)\n        self.i: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "ab8cc6ab9f25d2b85c810451a1d713c219c1bb0b5e0f78c77b63e67ba0792e24"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'MisskeyWebSocket', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 42,
      "offset": 37,
      "length": 4,
      "code": {
        "startLine": 40,
        "length": 4,
        "offset": 114,
        "surroundingCode": "        self.i: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None\n\n    def _get_state(self, **options: Any) -> ConnectionState:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "a7200453d980d0423e16e1d57a8119868a3697f8814aaf7a59f173adf75eecba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'dict' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 289,
      "offset": 16,
      "length": 78,
      "code": {
        "startLine": 287,
        "length": 78,
        "offset": 28,
        "surroundingCode": "        \"\"\"\n\n        return await self._connection.get_user(user_id=user_id, username=username, host=host)\n\n    async def fetch_user(self, user_id: Optional[str] = None, username: Optional[str] = None,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "8008c826b058e47f6dcf5ee5658075a6888888b7df844dc57684dcfcd1bd9b28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'dict' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 311,
      "offset": 16,
      "length": 80,
      "code": {
        "startLine": 309,
        "length": 80,
        "offset": 28,
        "surroundingCode": "        \"\"\"\n\n        return await self._connection.fetch_user(user_id=user_id, username=username, host=host)\n\n    async def file_upload("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "9b1611001ec3e6a97d8d2dbc726a1a9509238236724a64f400a2d598af9491de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'RawEmoji', got 'Emoji' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/instance.py",
      "language": "Python",
      "line": 40,
      "offset": 43,
      "length": 1,
      "code": {
        "startLine": 38,
        "length": 1,
        "offset": 168,
        "surroundingCode": "        self.error_image: str = data['error_image_url']\n        self.max_note_text_length: int = data['max_note_text_length']\n        self.emojis: List[Emoji] = [Emoji(i, state=state) for i in data['emojis']]\n        self.ads: list = data['ads']\n        self.enable_email: bool = bool(data['enable_email'])"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "67e1df173c67cad5ff9aa1d29a48844dddbd088fda67a5a3fd1f99ff21f993e8"
}]}