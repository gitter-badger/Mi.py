{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'command_prefix' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 34,
      "offset": 24,
      "length": 34,
      "code": {
        "startLine": 32,
        "length": 34,
        "offset": 72,
        "surroundingCode": "\nclass BotBase(CommandManager, AbstractBotBase):\n    def __init__(self, command_prefix: Optional[str]=None, **options: Dict[Any, Any]):\n        \"\"\"\n        .. deprecated:: v2.3.0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "2a81c8f2b6f579423935a1f918d74d05bf3407c10b92c1fd2ebd260a6668dd87"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'kwargs' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/core.py",
      "language": "Python",
      "line": 20,
      "offset": 42,
      "length": 8,
      "code": {
        "startLine": 18,
        "length": 8,
        "offset": 71,
        "surroundingCode": "\nclass Command(_BaseCommand):\n    def __init__(self, func, regex: str, **kwargs):\n        if not asyncio.iscoroutinefunction(func):\n            raise TypeError(f'{func}はコルーチンでなければなりません')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "498f2aae086b49ecc9d0cc822a6ea4a18848f7228a1397ebdb3f8a56813a5c69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'reconnect' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 495,
      "offset": 32,
      "length": 22,
      "code": {
        "startLine": 493,
        "length": 22,
        "offset": 78,
        "surroundingCode": "        self.i = User(data, self._connection)\n\n    async def connect(self, *, reconnect: bool = True, timeout: int = 60) -> None:\n\n        coro = MisskeyWebSocket.from_client(self, timeout=timeout)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "d4b00af311632771c0f1dda8a46710571fe990c792473f3918cc350a2477be61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 64,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 62,
        "length": 4,
        "offset": 39,
        "surroundingCode": "\n\ndef depart_attributetable_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c2783c30b39c7803d6b306a324dc75470ecd2c43010974e1255a541f02bd66c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 68,
      "offset": 44,
      "length": 4,
      "code": {
        "startLine": 66,
        "length": 4,
        "offset": 45,
        "surroundingCode": "\n\ndef depart_attributetablecolumn_node(self, node):\n    self.body.append('</div>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "c0259b8a9d9ede31374c99ce5cde5b08e498fd8bffb7a3c6c49cf23b479e1435"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 72,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 70,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetabletitle_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f1ba68d3e3cf22827c0089314d3801ff5f436e64e7691ac872cd842cd9ddc9c9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 76,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetablebadge_node(self, node):\n    self.body.append('</span>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "8bfdbb91e0b2d3edac3af7876b27f24741b310c30acabdc5bf9968f78033810c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'node' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 80,
      "offset": 43,
      "length": 4,
      "code": {
        "startLine": 78,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n\ndef depart_attributetable_item_node(self, node):\n    self.body.append('</li>')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "f75f0f54a460710801f1f0f91151b48653daa46c27bb5353ec80f6035762dde6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "severity": "Moderate",
  "comment": "Parameter 'fromdocname' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 170,
      "offset": 62,
      "length": 16,
      "code": {
        "startLine": 168,
        "length": 16,
        "offset": 63,
        "surroundingCode": "\n\ndef process_attributetable(app: application.Sphinx, doctree, fromdocname: str):\n    env = app.builder.env\n    lookup = build_lookup_table(env)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection"
  },
  "hash": "26e407b636c2a5b80976ded6e8fea8a6919ebaa54eaaf350cc984b9224f26842"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "severity": "High",
  "comment": "Name '__path__' can be undefined",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/__init__.py",
      "language": "Python",
      "line": 9,
      "offset": 46,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 68,
        "surroundingCode": "__version__ = \"2.0.0\"\n\n__path__ = __import__(\"pkgutil\").extend_path(__path__, __name__)\n\nfrom .abc import *"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "cb17ed8bde90e59df0e39b9594d8572952f2312671e7e72340569d44a803855d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/bot.py",
      "language": "Python",
      "line": 9,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 7,
        "length": 15,
        "offset": 8,
        "surroundingCode": "\n\nclass AbstractBotBase:\n    @abstractmethod\n    async def _on_message(self, message):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "f16717ecad7ca99d38924ef363bef7d51192c4386c3c2474d560922503e27c34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/_types.py",
      "language": "Python",
      "line": 1,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 1,
        "length": 12,
        "offset": 6,
        "surroundingCode": "class _BaseCommand:\n    __slots__ = ()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "eb206ac918f84fd8ed9c011967448fef19ebd652d2ec18b85cb042869c5a0287"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/instance.py",
      "language": "Python",
      "line": 9,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass Features:\n    registration: bool\n    local_time_line: bool"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "8b55c9d41d5959d58cced62f653206b4ca23179d05d4a47e3fec158743619d81"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/http.py",
      "language": "Python",
      "line": 16,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 14,
        "length": 16,
        "offset": 8,
        "surroundingCode": "\n\nclass _MissingSentinel:\n    def __eq__(self, other):\n        return False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "eac5e23a7ea28dc0784d683e91070d247a1b2b7c33953b3a20ff020528218e28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 15,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 13,
        "length": 14,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "864af21adf92daee912befdfe8f40cfa477ac9bf7c187b09be85aaf18b2f8a01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 19,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 17,
        "length": 20,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablecolumn(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "73d0b2a4abb082fe0874fde273575ff2420d4985fff7d7d9ab649c69dc5bad41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 23,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 21,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetabletitle(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "073e0b2a7f7627abb0424f2a5bd62947f3ae3c6f744626b99321a86ae796cc1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 27,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 25,
        "length": 25,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetableplaceholder(nodes.General, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "2c6dd13b6676bf62a49ec1f5bc57bc44c5b0edf019532032837c286bc69ea817"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 31,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 29,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetablebadge(nodes.TextElement):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "7bb23b02ec5ff0f3d57b5e25ca91326a0f4e262100664c05154fd27b8276f6a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "severity": "Moderate",
  "comment": "Class names should use CamelCase convention",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 35,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 8,
        "surroundingCode": "\n\nclass attributetable_item(nodes.Part, nodes.Element):\n    pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "acdd07f0f692222f4a4e65e7f56ebb34d1462eb9a94d73321ed345a55e6fb59c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _inject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 145,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 143,
        "length": 11,
        "offset": 65,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: 作る\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "1591c8db08cdc55bcce7071151fe0c7969aafa7e06625d103dc680fa3186921f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _eject of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 154,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 152,
        "length": 10,
        "offset": 28,
        "surroundingCode": "            return\n\n        cog._eject(self)\n\n        return cog"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "8fd0d3f8dbadc3dbb41ba9d4d5c5ba2f6c45e2a5a8c8dc802a4fad76357e1848"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "'Follower' is not declared in __all__",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 18,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 16,
        "length": 8,
        "offset": 103,
        "surroundingCode": "from mi.iterators import InstanceIterator\nfrom mi.note import Note, Poll, Reaction\nfrom mi.user import Follower, Following\nfrom mi.utils import check_multi_arg, get_cache_key, get_module_logger, key_builder, remove_dict_empty, str_lower, \\\n    upper_to_lower"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "a0aa05d5c64fcee3ceece9c28947bc4f3a37276935aeb4dd89ede8ec4cb74aa5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _on_message of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 304,
      "offset": 9,
      "length": 23,
      "code": {
        "startLine": 302,
        "length": 23,
        "offset": 127,
        "surroundingCode": "        note = Note(message, state=self)\n        # Router(self.http.ws).capture_message(note.id) TODO: capture message\n        self.client._on_message(note)\n\n    async def follow_user(self, user_id: str) -> tuple[bool, Optional[str]]:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "f7b54d8152046f28995a1daa29084af4ea698be65a094b2c832afa9cf2e96773"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 34,
      "offset": 26,
      "length": 18,
      "code": {
        "startLine": 32,
        "length": 18,
        "offset": 89,
        "surroundingCode": "        ws = cls(socket)\n        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "cb82104c3651bf1b7fc6c1189ce4be6b91029dd662057f0380dd37f21eacd948"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _connection of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/gateway.py",
      "language": "Python",
      "line": 35,
      "offset": 31,
      "length": 18,
      "code": {
        "startLine": 33,
        "length": 18,
        "offset": 113,
        "surroundingCode": "        ws._dispatch = client.dispatch\n        ws._connection = client._connection\n        ws._misskey_parsers = client._connection.parsers\n        client.dispatch('ready', socket)\n        await ws.poll_event(timeout=timeout)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "cb7208e03602cb7ce798da42117e6a9be65adfc02c8308ed1c3eb87dc8cf92d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "severity": "Moderate",
  "comment": "Access to a protected member _ of a class",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "docs/extensions/attributetable.py",
      "language": "Python",
      "line": 11,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 9,
        "length": 1,
        "offset": 94,
        "surroundingCode": "from docutils import nodes\nfrom sphinx import addnodes, application\nfrom sphinx.locale import _\nfrom sphinx.util.docutils import SphinxDirective\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection"
  },
  "hash": "506378a3f289ce1cd91921b47d91df63e0b2ce0a3fd0bc7a74c2b53bb19a6619"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 49,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 116,
        "surroundingCode": "        self.origin_uri: Optional[str] = None\n        self.__extensions: Dict[str, Any] = {}\n        self.i: User = None\n        self.__cogs: Dict[str, Cog] = {}\n        self.strip_after_prefix = options.get(\"strip_after_prefix\", False)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "ca4838c3e3cf5366f3d4448518c856c45780a4975908d59d895adafdf9a569a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'Bot', got 'BotBase' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/ext/commands/bot.py",
      "language": "Python",
      "line": 145,
      "offset": 27,
      "length": 4,
      "code": {
        "startLine": 143,
        "length": 4,
        "offset": 77,
        "surroundingCode": "            self.remove_cog(cog_name)  # TODO: 作る\n\n        cog = cog._inject(self)\n        self.__cogs[cog_name] = cog\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "cf633abe70fd1c3435550ad157a439be2da0b33507649051d9d6f460a563c255"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Type 'User' doesn't have expected attribute 'get'",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/user.py",
      "language": "Python",
      "line": 258,
      "offset": 36,
      "length": 4,
      "code": {
        "startLine": 256,
        "length": 4,
        "offset": 167,
        "surroundingCode": "        self.is_blocked: bool = bool(data.get(\"is_blocked\", False))\n        self.is_muted: bool = bool(data.get(\"is_muted\", False))\n        self.details = UserDetails(data)\n        self._state = state\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "8960ac2eed15b25da7027986efe5abfa5d689d1d00967e59bfb8d1a0d5410421"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'ConnectionState', got 'NoteActions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 94,
      "offset": 42,
      "length": 10,
      "code": {
        "startLine": 92,
        "length": 10,
        "offset": 191,
        "surroundingCode": "        field = remove_dict_empty(field)\n        res = await self.http.request(Route('POST', '/api/notes/create'), json=field, auth=True, lower=True)\n        return Note(res[\"created_note\"], state=self)\n\n    async def create_renote(self, note_id: str) -> Note:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "da557db831ee25521ccf21c1046ed1fb5912b8b9a64536bb1179dd36d588acc9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'ConnectionState', got 'NoteActions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 117,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 115,
        "length": 10,
        "offset": 193,
        "surroundingCode": "    async def get_note(self, note_id) -> Note:\n        res = await self.http.request(Route('POST', '/api/notes/show'), json={\"noteId\": note_id}, auth=True, lower=True)\n        return Note(res, state=self)\n\n    async def get_replies(self, note_id: str, since_id: Optional[str] = None, until_id: Optional[str] = None,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "940d7f9528d83c75637ac03c5dde1829b874dcc88cd06f554f968fbe1e7878da"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'ConnectionState', got 'NoteActions' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 124,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 122,
        "length": 10,
        "offset": 207,
        "surroundingCode": "                                      json={\"noteId\": note_id, \"sinceId\": since_id, \"untilId\": until_id, \"limit\": limit},\n                                      auth=True, lower=True)\n        return [Note(i, state=self) for i in res]\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "9d8b4cf2a075bb9b13b224e4bf2b7089f3f84a84cbf112b0e839e79231747a55"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'User', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 39,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 37,
        "length": 4,
        "offset": 158,
        "surroundingCode": "        self.http: HTTPClient = HTTPClient(connector=connector)\n        self._connection: ConnectionState = self._get_state(**options)\n        self.i: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "dc7711f15374e08fc6490139fd9081de2dee72ff5de4dc3eaecaec5257cb6c10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "severity": "High",
  "comment": "Expected type 'MisskeyWebSocket', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 41,
      "offset": 37,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 114,
        "surroundingCode": "        self.i: User = None\n        self.logger = get_module_logger(__name__)\n        self.ws: MisskeyWebSocket = None\n\n    def _get_state(self, **options: Any) -> ConnectionState:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "e3b1a8452df9b88f26b674503a3087f2c14a72571d5f8277b469a6767162dd94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "severity": "Moderate",
  "comment": "Method `on_message` may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "examples/use_class.py",
      "language": "Python",
      "line": 28,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 26,
        "length": 10,
        "offset": 51,
        "surroundingCode": "        self.task.stop()  # タスクを止める\n\n    async def on_message(self, note: Note):\n        print(\n            f\"{note.author.instance.name} | {note.author.username}さんがノートしました: {note.content}\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "8c53e9edfe0562802e59493d89444a0e584f03caf097ba4b36c49ca2c0f3c571"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 46,
      "offset": 84,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 219,
        "surroundingCode": "    async def add_reaction_to_note(self, note_id: str, reaction: str) -> bool:\n        data = {'noteId': note_id, 'reaction': reaction}\n        return bool(await self.http.request(Route('POST', '/api/reactions/create', json=data, auth=True)))\n\n    async def post_note(self,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "f2fb1afdd950a072868a1a2c082801b820b6986d188beed33e2118e6e86c0caf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/state.py",
      "language": "Python",
      "line": 46,
      "offset": 95,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 230,
        "surroundingCode": "    async def add_reaction_to_note(self, note_id: str, reaction: str) -> bool:\n        data = {'noteId': note_id, 'reaction': reaction}\n        return bool(await self.http.request(Route('POST', '/api/reactions/create', json=data, auth=True)))\n\n    async def post_note(self,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "f4bb497bb0f56a4bb965a92fd00c1e8a9273db9150207ea70252cd64e7079f73"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect call arguments",
  "severity": "High",
  "comment": "Unexpected argument",
  "detailsInfo": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "mi/client.py",
      "language": "Python",
      "line": 44,
      "offset": 101,
      "length": 9,
      "code": {
        "startLine": 42,
        "length": 9,
        "offset": 162,
        "surroundingCode": "\n    def _get_state(self, **options: Any) -> ConnectionState:\n        return ConnectionState(dispatch=self.dispatch, http=self.http, loop=self.loop, client=self, **options)\n\n    async def on_ready(self, ws: ClientWebSocketResponse):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyArgumentListInspection"
  },
  "hash": "6db43f58ec1f8f03db77ea814b4e531f29a70f57acb544ea7b420b4c69962ff8"
}]}