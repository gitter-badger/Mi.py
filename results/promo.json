{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An invalid interpreter",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "No Python interpreter configured for the project",
  "detailsInfo": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings.",
  "sources": [
    {
      "type": "file",
      "path": "mi/abc/ext/core.py",
      "language": "Python",
      "line": 1,
      "offset": 0,
      "length": 873,
      "code": {
        "startLine": 1,
        "length": 873,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\nfrom typing import Any, Dict\n\n\nclass AbstractGroupMixin(ABC):\n    @property\n    @abstractmethod\n    def command(self):\n        pass\n\n    @abstractmethod\n    def add_command(self, command: \"AbstractCommand\"):\n        pass\n\n    @abstractmethod\n    def remove_command(self, name:str):\n        pass\n\nclass AbstractCommand(ABC):\n    @property\n    @abstractmethod\n    def full_parent_name(self) -> str:\n        pass\n\n    @property\n    @abstractmethod\n    def qualified_name(self) -> str:\n        pass\n\n    @abstractmethod\n    def _ensure_assignment_on_copy(self, other: 'AbstractCommand') -> 'AbstractCommand':\n        pass\n\n    @abstractmethod\n    def copy(self) -> 'AbstractCommand':\n        pass\n\n    @abstractmethod\n    def _update_copy(self, kwargs: Dict[Any, Any]) -> 'AbstractCommand':\n        pass\n\n\nclass AbstractGroup(ABC):\n    pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyInterpreterInspection"
  },
  "hash": "6360504399407449567"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An invalid interpreter",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "No Python interpreter configured for the project",
  "detailsInfo": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings.",
  "sources": [
    {
      "type": "file",
      "path": "mi/types/bot.py",
      "language": "Python",
      "line": 1,
      "offset": 0,
      "length": 396,
      "code": {
        "startLine": 1,
        "length": 396,
        "offset": 0,
        "surroundingCode": "from abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional\n\n\nclass AbstractBotBase(ABC):\n    @abstractmethod\n    async def dispatch(self, event_name: Optional[str] = None, *args: tuple[Any], **kwargs: Dict[Any, Any]):\n        pass\n\n    @abstractmethod\n    async def event_dispatch(self, event_name: Optional[str] = None, *args: tuple[Any], **kwargs: Dict[Any, Any]):\n        pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyInterpreterInspection"
  },
  "hash": "2989453086340100170"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "An invalid interpreter",
  "tags": [
    "Cython"
  ],
  "severity": "High",
  "comment": "No Python interpreter configured for the project",
  "detailsInfo": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings.",
  "sources": [
    {
      "type": "file",
      "path": "mi/next_utils.pyx",
      "language": "Cython",
      "line": 1,
      "offset": 0,
      "length": 322,
      "code": {
        "startLine": 1,
        "length": 322,
        "offset": 0,
        "surroundingCode": "import cython\n\n@cython.boundscheck(False)\n@cython.wraparound(False)\ndef check_multi_arg(*args) -> bool:\n    \"\"\"?????????????????bool?????\n\n    Parameters\n    ----------\n    args : list\n        ???????????\n\n    Returns\n    -------\n    bool\n        ???????True, ????????False\n    \"\"\"\n    return bool([i for i in args if i])"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyInterpreterInspection"
  },
  "hash": "4870343818881493355"
}]}